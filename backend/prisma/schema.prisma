// This is your Prisma schema file for SQLite
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  company   String?
  role      String   @default("CUSTOMER") // CUSTOMER, ADMIN, TECHNICIAN, SUPPORT
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  devices        Device[]
  orders         Order[]
  serviceTickets ServiceTicket[]
  customBuilds   CustomBuild[]
  reviews        Review[]
  cart           Cart?

  @@map("users")
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String
  price          Float
  originalPrice  Float?
  category       String // SECURITY, ASSISTANT, INDUSTRIAL, DRONE, COMPONENT
  images         String // Comma-separated image URLs
  specifications String? // JSON as string
  features       String // Comma-separated features
  inStock        Boolean  @default(true)
  stockCount     Int      @default(0)
  rating         Float    @default(0)
  reviewCount    Int      @default(0)
  badge          String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  orderItems       OrderItem[]
  reviews          Review[]
  devices          Device[]
  customBuildParts CustomBuildPart[]

  @@map("products")
}

model Device {
  id        String   @id @default(cuid())
  name      String
  type      String
  status    String   @default("OFFLINE") // ACTIVE, IDLE, MAINTENANCE, OFFLINE, ERROR
  battery   Int      @default(100)
  location  String?
  lastSeen  DateTime @default(now())
  isOnline  Boolean  @default(false)
  tasks     String?
  userId    String
  productId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product        Product?        @relation(fields: [productId], references: [id])
  serviceTickets ServiceTicket[]

  @@map("devices")
}

model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  userId          String
  status          String   @default("PENDING") // PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED
  totalAmount     Float
  shippingAddress String // JSON as string
  billingAddress  String? // JSON as string
  paymentStatus   String   @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  paymentIntentId String?
  trackingNumber  String?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ServiceTicket {
  id            String    @id @default(cuid())
  ticketNumber  String    @unique
  userId        String
  deviceId      String?
  title         String
  description   String
  status        String    @default("OPEN") // OPEN, IN_PROGRESS, SCHEDULED, COMPLETED, CANCELLED
  priority      String    @default("MEDIUM") // LOW, MEDIUM, HIGH, URGENT
  issueType     String
  assignedTo    String?
  scheduledDate DateTime?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id])
  device Device? @relation(fields: [deviceId], references: [id])

  @@map("service_tickets")
}

model CustomBuild {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  designFiles String // Comma-separated file URLs
  status      String   @default("DRAFT") // DRAFT, QUOTE_REQUESTED, APPROVED, IN_PRODUCTION, COMPLETED, CANCELLED
  totalCost   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User              @relation(fields: [userId], references: [id])
  parts CustomBuildPart[]

  @@map("custom_builds")
}

model CustomBuildPart {
  id        String   @id @default(cuid())
  buildId   String
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  // Relations
  build   CustomBuild @relation(fields: [buildId], references: [id], onDelete: Cascade)
  product Product     @relation(fields: [productId], references: [id])

  @@map("custom_build_parts")
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  title      String?
  comment    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

// Persistent shopping cart models
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  name      String?
  price     Float    @default(0)
  quantity  Int
  createdAt DateTime @default(now())

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}
