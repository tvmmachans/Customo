// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  phone     String?
  company   String?
  role      UserRole @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  devices     Device[]
  orders      Order[]
  serviceTickets ServiceTicket[]
  customBuilds CustomBuild[]
  reviews     Review[]

  @@map("users")
}

model Product {
  id          String        @id @default(cuid())
  name        String
  description String
  price       Decimal       @db.Decimal(10, 2)
  originalPrice Decimal?    @db.Decimal(10, 2)
  category    ProductCategory
  images      String[]
  specifications Json?
  features    String[]
  inStock     Boolean       @default(true)
  stockCount  Int           @default(0)
  rating      Float         @default(0)
  reviewCount Int           @default(0)
  badge       String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  orderItems  OrderItem[]
  reviews     Review[]
  devices     Device[]
  customBuildParts CustomBuildPart[]

  @@map("products")
}

model Device {
  id          String      @id @default(cuid())
  name        String
  type        String
  status      DeviceStatus @default(OFFLINE)
  battery     Int         @default(100)
  location    String?
  lastSeen    DateTime    @default(now())
  isOnline    Boolean     @default(false)
  tasks       String?
  userId      String
  productId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product?    @relation(fields: [productId], references: [id])
  serviceTickets ServiceTicket[]

  @@map("devices")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Decimal    @db.Decimal(10, 2)
  shippingAddress Json
  billingAddress Json?
  paymentStatus PaymentStatus @default(PENDING)
  paymentIntentId String?
  trackingNumber String?
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id])
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ServiceTicket {
  id          String        @id @default(cuid())
  ticketNumber String       @unique
  userId      String
  deviceId    String?
  title       String
  description String
  status      TicketStatus  @default(OPEN)
  priority    Priority      @default(MEDIUM)
  issueType   String
  assignedTo  String?
  scheduledDate DateTime?
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id])
  device      Device?       @relation(fields: [deviceId], references: [id])

  @@map("service_tickets")
}

model CustomBuild {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  designFiles String[]
  status      BuildStatus @default(DRAFT)
  totalCost   Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id])
  parts       CustomBuildPart[]

  @@map("custom_builds")
}

model CustomBuildPart {
  id          String  @id @default(cuid())
  buildId     String
  productId   String
  quantity    Int
  createdAt   DateTime @default(now())

  // Relations
  build       CustomBuild @relation(fields: [buildId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])

  @@map("custom_build_parts")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  TECHNICIAN
  SUPPORT
}

enum ProductCategory {
  SECURITY
  ASSISTANT
  INDUSTRIAL
  DRONE
  COMPONENT
}

enum DeviceStatus {
  ACTIVE
  IDLE
  MAINTENANCE
  OFFLINE
  ERROR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BuildStatus {
  DRAFT
  QUOTE_REQUESTED
  APPROVED
  IN_PRODUCTION
  COMPLETED
  CANCELLED
}
